{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center>\n",
    "    <img src=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/Images/SN_logo.png\" width=\"300\" alt=\"cognitiveclass.ai logo\">\n",
    "</center>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1>Extracting Stock Data Using a Python Library</h1>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A company's stock share is a piece of the company more precisely:\n",
    "<p><b>A stock (also known as equity) is a security that represents the ownership of a fraction of a corporation. This\n",
    "entitles the owner of the stock to a proportion of the corporation's assets and profits equal to how much stock they own. Units of stock are called \"shares.\" [1]</p></b>\n",
    "\n",
    "An investor can buy a stock and sell it later. If the stock price increases, the investor profits, If it decreases,the investor with incur a loss.  Determining the stock price is complex; it depends on the number of outstanding shares, the size of the company's future profits, and much more. People trade stocks throughout the day the stock ticker is a report of the price of a certain stock, updated continuously throughout the trading session by the various stock market exchanges. \n",
    "<p>You are a data scientist working for a hedge fund; it's your job to determine any suspicious stock activity. In this lab you will extract stock data using a Python library. We will use the <coode>yfinance</code> library, it allows us to extract data for stocks returning data in a pandas dataframe. You will use the lab to extract.</p>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Table of Contents</h2>\n",
    "<div class=\"alert alert-block alert-info\" style=\"margin-top: 20px\">\n",
    "    <ul>\n",
    "        <li>Using yfinance to Extract Stock Info</li>\n",
    "        <li>Using yfinance to Extract Historical Share Price Data</li>\n",
    "        <li>Using yfinance to Extract Historical Dividends Data</li>\n",
    "        <li>Exercise</li>\n",
    "    </ul>\n",
    "<p>\n",
    "    Estimated Time Needed: <strong>30 min</strong></p>\n",
    "</div>\n",
    "\n",
    "<hr>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting yfinance==0.2.4\n",
      "  Downloading yfinance-0.2.4-py2.py3-none-any.whl (51 kB)\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m51.4/51.4 kB\u001b[0m \u001b[31m9.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hRequirement already satisfied: pandas>=1.3.0 in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from yfinance==0.2.4) (1.3.5)\n",
      "Requirement already satisfied: numpy>=1.16.5 in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from yfinance==0.2.4) (1.21.6)\n",
      "Requirement already satisfied: requests>=2.26 in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from yfinance==0.2.4) (2.29.0)\n",
      "Collecting multitasking>=0.0.7 (from yfinance==0.2.4)\n",
      "  Downloading multitasking-0.0.11-py3-none-any.whl (8.5 kB)\n",
      "Requirement already satisfied: lxml>=4.9.1 in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from yfinance==0.2.4) (4.9.2)\n",
      "Collecting appdirs>=1.4.4 (from yfinance==0.2.4)\n",
      "  Downloading appdirs-1.4.4-py2.py3-none-any.whl (9.6 kB)\n",
      "Requirement already satisfied: pytz>=2022.5 in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from yfinance==0.2.4) (2023.3)\n",
      "Collecting frozendict>=2.3.4 (from yfinance==0.2.4)\n",
      "  Downloading frozendict-2.3.8-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (101 kB)\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m101.7/101.7 kB\u001b[0m \u001b[31m19.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hRequirement already satisfied: cryptography>=3.3.2 in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from yfinance==0.2.4) (38.0.2)\n",
      "Requirement already satisfied: beautifulsoup4>=4.11.1 in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from yfinance==0.2.4) (4.11.1)\n",
      "Collecting html5lib>=1.1 (from yfinance==0.2.4)\n",
      "  Downloading html5lib-1.1-py2.py3-none-any.whl (112 kB)\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m112.2/112.2 kB\u001b[0m \u001b[31m24.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
      "\u001b[?25hRequirement already satisfied: soupsieve>1.2 in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from beautifulsoup4>=4.11.1->yfinance==0.2.4) (2.3.2.post1)\n",
      "Requirement already satisfied: cffi>=1.12 in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from cryptography>=3.3.2->yfinance==0.2.4) (1.15.1)\n",
      "Requirement already satisfied: six>=1.9 in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from html5lib>=1.1->yfinance==0.2.4) (1.16.0)\n",
      "Requirement already satisfied: webencodings in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from html5lib>=1.1->yfinance==0.2.4) (0.5.1)\n",
      "Requirement already satisfied: python-dateutil>=2.7.3 in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from pandas>=1.3.0->yfinance==0.2.4) (2.8.2)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from requests>=2.26->yfinance==0.2.4) (3.1.0)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from requests>=2.26->yfinance==0.2.4) (3.4)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from requests>=2.26->yfinance==0.2.4) (1.26.15)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from requests>=2.26->yfinance==0.2.4) (2023.5.7)\n",
      "Requirement already satisfied: pycparser in /home/jupyterlab/conda/envs/python/lib/python3.7/site-packages (from cffi>=1.12->cryptography>=3.3.2->yfinance==0.2.4) (2.21)\n",
      "Installing collected packages: multitasking, appdirs, html5lib, frozendict, yfinance\n",
      "Successfully installed appdirs-1.4.4 frozendict-2.3.8 html5lib-1.1 multitasking-0.0.11 yfinance-0.2.4\n"
     ]
    }
   ],
   "source": [
    "!pip install yfinance==0.2.4\n",
    "#!pip install pandas==1.3.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Using the yfinance Library to Extract Stock Data\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using the `Ticker` module we can create an object that will allow us to access functions to extract data. To do this we need to provide the ticker symbol for the stock, here the company is Apple and the ticker symbol is `AAPL`.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "apple = yf.Ticker(\"AAPL\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can access functions and variables to extract the type of data we need. You can view them and what they represent here https://aroussi.com/post/python-yahoo-finance.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2023-10-06 19:33:59--  https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/data/apple.json\n",
      "Resolving cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud (cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud)... 169.63.118.104\n",
      "Connecting to cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud (cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud)|169.63.118.104|:443... connected.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: 5699 (5.6K) [application/json]\n",
      "Saving to: ‘apple.json.2’\n",
      "\n",
      "apple.json.2        100%[===================>]   5.57K  --.-KB/s    in 0s      \n",
      "\n",
      "2023-10-06 19:33:59 (42.6 MB/s) - ‘apple.json.2’ saved [5699/5699]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "!wget https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/data/apple.json"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "### Stock Info\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using the attribute  <code>info</code> we can extract information about the stock as a Python dictionary.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'zip': '95014',\n",
       " 'sector': 'Technology',\n",
       " 'fullTimeEmployees': 100000,\n",
       " 'longBusinessSummary': 'Apple Inc. designs, manufactures, and markets smartphones, personal computers, tablets, wearables, and accessories worldwide. It also sells various related services. In addition, the company offers iPhone, a line of smartphones; Mac, a line of personal computers; iPad, a line of multi-purpose tablets; AirPods Max, an over-ear wireless headphone; and wearables, home, and accessories comprising AirPods, Apple TV, Apple Watch, Beats products, HomePod, and iPod touch. Further, it provides AppleCare support services; cloud services store services; and operates various platforms, including the App Store that allow customers to discover and download applications and digital content, such as books, music, video, games, and podcasts. Additionally, the company offers various services, such as Apple Arcade, a game subscription service; Apple Music, which offers users a curated listening experience with on-demand radio stations; Apple News+, a subscription news and magazine service; Apple TV+, which offers exclusive original content; Apple Card, a co-branded credit card; and Apple Pay, a cashless payment service, as well as licenses its intellectual property. The company serves consumers, and small and mid-sized businesses; and the education, enterprise, and government markets. It distributes third-party applications for its products through the App Store. The company also sells its products through its retail and online stores, and direct sales force; and third-party cellular network carriers, wholesalers, retailers, and resellers. Apple Inc. was incorporated in 1977 and is headquartered in Cupertino, California.',\n",
       " 'city': 'Cupertino',\n",
       " 'phone': '408 996 1010',\n",
       " 'state': 'CA',\n",
       " 'country': 'United States',\n",
       " 'companyOfficers': [],\n",
       " 'website': 'https://www.apple.com',\n",
       " 'maxAge': 1,\n",
       " 'address1': 'One Apple Park Way',\n",
       " 'industry': 'Consumer Electronics',\n",
       " 'ebitdaMargins': 0.33890998,\n",
       " 'profitMargins': 0.26579002,\n",
       " 'grossMargins': 0.43019,\n",
       " 'operatingCashflow': 112241000448,\n",
       " 'revenueGrowth': 0.112,\n",
       " 'operatingMargins': 0.309,\n",
       " 'ebitda': 128217997312,\n",
       " 'targetLowPrice': 160,\n",
       " 'recommendationKey': 'buy',\n",
       " 'grossProfits': 152836000000,\n",
       " 'freeCashflow': 80153247744,\n",
       " 'targetMedianPrice': 199.5,\n",
       " 'currentPrice': 177.77,\n",
       " 'earningsGrowth': 0.25,\n",
       " 'currentRatio': 1.038,\n",
       " 'returnOnAssets': 0.19875,\n",
       " 'numberOfAnalystOpinions': 44,\n",
       " 'targetMeanPrice': 193.53,\n",
       " 'debtToEquity': 170.714,\n",
       " 'returnOnEquity': 1.45567,\n",
       " 'targetHighPrice': 215,\n",
       " 'totalCash': 63913000960,\n",
       " 'totalDebt': 122797998080,\n",
       " 'totalRevenue': 378323009536,\n",
       " 'totalCashPerShare': 3.916,\n",
       " 'financialCurrency': 'USD',\n",
       " 'revenuePerShare': 22.838,\n",
       " 'quickRatio': 0.875,\n",
       " 'recommendationMean': 1.8,\n",
       " 'exchange': 'NMS',\n",
       " 'shortName': 'Apple Inc.',\n",
       " 'longName': 'Apple Inc.',\n",
       " 'exchangeTimezoneName': 'America/New_York',\n",
       " 'exchangeTimezoneShortName': 'EDT',\n",
       " 'isEsgPopulated': False,\n",
       " 'gmtOffSetMilliseconds': '-14400000',\n",
       " 'quoteType': 'EQUITY',\n",
       " 'symbol': 'AAPL',\n",
       " 'messageBoardId': 'finmb_24937',\n",
       " 'market': 'us_market',\n",
       " 'annualHoldingsTurnover': None,\n",
       " 'enterpriseToRevenue': 7.824,\n",
       " 'beta3Year': None,\n",
       " 'enterpriseToEbitda': 23.086,\n",
       " '52WeekChange': 0.4549594,\n",
       " 'morningStarRiskRating': None,\n",
       " 'forwardEps': 6.56,\n",
       " 'revenueQuarterlyGrowth': None,\n",
       " 'sharesOutstanding': 16319399936,\n",
       " 'fundInceptionDate': None,\n",
       " 'annualReportExpenseRatio': None,\n",
       " 'totalAssets': None,\n",
       " 'bookValue': 4.402,\n",
       " 'sharesShort': 111286790,\n",
       " 'sharesPercentSharesOut': 0.0068,\n",
       " 'fundFamily': None,\n",
       " 'lastFiscalYearEnd': 1632528000,\n",
       " 'heldPercentInstitutions': 0.59397,\n",
       " 'netIncomeToCommon': 100554997760,\n",
       " 'trailingEps': 6.015,\n",
       " 'lastDividendValue': 0.22,\n",
       " 'SandP52WeekChange': 0.15217662,\n",
       " 'priceToBook': 40.38392,\n",
       " 'heldPercentInsiders': 0.0007,\n",
       " 'nextFiscalYearEnd': 1695600000,\n",
       " 'yield': None,\n",
       " 'mostRecentQuarter': 1640390400,\n",
       " 'shortRatio': 1.21,\n",
       " 'sharesShortPreviousMonthDate': 1644883200,\n",
       " 'floatShares': 16302795170,\n",
       " 'beta': 1.185531,\n",
       " 'enterpriseValue': 2959991898112,\n",
       " 'priceHint': 2,\n",
       " 'threeYearAverageReturn': None,\n",
       " 'lastSplitDate': 1598832000,\n",
       " 'lastSplitFactor': '4:1',\n",
       " 'legalType': None,\n",
       " 'lastDividendDate': 1643932800,\n",
       " 'morningStarOverallRating': None,\n",
       " 'earningsQuarterlyGrowth': 0.204,\n",
       " 'priceToSalesTrailing12Months': 7.668314,\n",
       " 'dateShortInterest': 1647302400,\n",
       " 'pegRatio': 1.94,\n",
       " 'ytdReturn': None,\n",
       " 'forwardPE': 27.099087,\n",
       " 'lastCapGain': None,\n",
       " 'shortPercentOfFloat': 0.0068,\n",
       " 'sharesShortPriorMonth': 108944701,\n",
       " 'impliedSharesOutstanding': 0,\n",
       " 'category': None,\n",
       " 'fiveYearAverageReturn': None,\n",
       " 'previousClose': 178.96,\n",
       " 'regularMarketOpen': 178.55,\n",
       " 'twoHundredDayAverage': 156.03505,\n",
       " 'trailingAnnualDividendYield': 0.004833482,\n",
       " 'payoutRatio': 0.1434,\n",
       " 'volume24Hr': None,\n",
       " 'regularMarketDayHigh': 179.61,\n",
       " 'navPrice': None,\n",
       " 'averageDailyVolume10Day': 93823630,\n",
       " 'regularMarketPreviousClose': 178.96,\n",
       " 'fiftyDayAverage': 166.498,\n",
       " 'trailingAnnualDividendRate': 0.865,\n",
       " 'open': 178.55,\n",
       " 'toCurrency': None,\n",
       " 'averageVolume10days': 93823630,\n",
       " 'expireDate': None,\n",
       " 'algorithm': None,\n",
       " 'dividendRate': 0.88,\n",
       " 'exDividendDate': 1643932800,\n",
       " 'circulatingSupply': None,\n",
       " 'startDate': None,\n",
       " 'regularMarketDayLow': 176.7,\n",
       " 'currency': 'USD',\n",
       " 'trailingPE': 29.55445,\n",
       " 'regularMarketVolume': 92633154,\n",
       " 'lastMarket': None,\n",
       " 'maxSupply': None,\n",
       " 'openInterest': None,\n",
       " 'marketCap': 2901099675648,\n",
       " 'volumeAllCurrencies': None,\n",
       " 'strikePrice': None,\n",
       " 'averageVolume': 95342043,\n",
       " 'dayLow': 176.7,\n",
       " 'ask': 178.53,\n",
       " 'askSize': 800,\n",
       " 'volume': 92633154,\n",
       " 'fiftyTwoWeekHigh': 182.94,\n",
       " 'fromCurrency': None,\n",
       " 'fiveYearAvgDividendYield': 1.13,\n",
       " 'fiftyTwoWeekLow': 122.25,\n",
       " 'bid': 178.4,\n",
       " 'tradeable': False,\n",
       " 'dividendYield': 0.005,\n",
       " 'bidSize': 3200,\n",
       " 'dayHigh': 179.61,\n",
       " 'regularMarketPrice': 177.77,\n",
       " 'preMarketPrice': 178.38,\n",
       " 'logo_url': 'https://logo.clearbit.com/apple.com'}"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import json\n",
    "with open('apple.json') as json_file:\n",
    "    apple_info = json.load(json_file)\n",
    "    # Print the type of data variable    \n",
    "    #print(\"Type:\", type(apple_info))\n",
    "apple_info"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can get the <code>'country'</code> using the key country\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'United States'"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "apple_info['country']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Extracting Share Price\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A share is the single smallest part of a company's stock  that you can buy, the prices of these shares fluctuate over time. Using the <code>history()</code> method we can get the share price of the stock over a certain period of time. Using the `period` parameter we can set how far back from the present to get data. The options for `period` are 1 day (1d), 5d, 1 month (1mo) , 3mo, 6mo, 1 year (1y), 2y, 5y, 10y, ytd, and max.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "apple_share_price_data = apple.history(period=\"max\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The format that the data is returned in is a Pandas DataFrame. With the `Date` as the index the share `Open`, `High`, `Low`, `Close`, `Volume`, and `Stock Splits` are given for each day.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Dividends</th>\n",
       "      <th>Stock Splits</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1980-12-12 00:00:00-05:00</th>\n",
       "      <td>0.099449</td>\n",
       "      <td>0.099882</td>\n",
       "      <td>0.099449</td>\n",
       "      <td>0.099449</td>\n",
       "      <td>469033600</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1980-12-15 00:00:00-05:00</th>\n",
       "      <td>0.094694</td>\n",
       "      <td>0.094694</td>\n",
       "      <td>0.094261</td>\n",
       "      <td>0.094261</td>\n",
       "      <td>175884800</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1980-12-16 00:00:00-05:00</th>\n",
       "      <td>0.087775</td>\n",
       "      <td>0.087775</td>\n",
       "      <td>0.087343</td>\n",
       "      <td>0.087343</td>\n",
       "      <td>105728000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1980-12-17 00:00:00-05:00</th>\n",
       "      <td>0.089504</td>\n",
       "      <td>0.089937</td>\n",
       "      <td>0.089504</td>\n",
       "      <td>0.089504</td>\n",
       "      <td>86441600</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1980-12-18 00:00:00-05:00</th>\n",
       "      <td>0.092099</td>\n",
       "      <td>0.092532</td>\n",
       "      <td>0.092099</td>\n",
       "      <td>0.092099</td>\n",
       "      <td>73449600</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               Open      High       Low     Close     Volume  \\\n",
       "Date                                                                           \n",
       "1980-12-12 00:00:00-05:00  0.099449  0.099882  0.099449  0.099449  469033600   \n",
       "1980-12-15 00:00:00-05:00  0.094694  0.094694  0.094261  0.094261  175884800   \n",
       "1980-12-16 00:00:00-05:00  0.087775  0.087775  0.087343  0.087343  105728000   \n",
       "1980-12-17 00:00:00-05:00  0.089504  0.089937  0.089504  0.089504   86441600   \n",
       "1980-12-18 00:00:00-05:00  0.092099  0.092532  0.092099  0.092099   73449600   \n",
       "\n",
       "                           Dividends  Stock Splits  \n",
       "Date                                                \n",
       "1980-12-12 00:00:00-05:00        0.0           0.0  \n",
       "1980-12-15 00:00:00-05:00        0.0           0.0  \n",
       "1980-12-16 00:00:00-05:00        0.0           0.0  \n",
       "1980-12-17 00:00:00-05:00        0.0           0.0  \n",
       "1980-12-18 00:00:00-05:00        0.0           0.0  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "apple_share_price_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can reset the index of the DataFrame with the `reset_index` function. We also set the `inplace` paramter to `True` so the change takes place to the DataFrame itself.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "apple_share_price_data.reset_index(inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can plot the `Open` price against the `Date`:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Date'>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "apple_share_price_data.plot(x=\"Date\", y=\"Open\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "### Extracting Dividends\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Dividends are the distribution of a companys profits to shareholders. In this case they are defined as an amount of money returned per share an investor owns. Using the variable `dividends` we can get a dataframe of the data. The period of the data is given by the period defined in the 'history` function.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date\n",
       "1987-05-11 00:00:00-04:00    0.000536\n",
       "1987-08-10 00:00:00-04:00    0.000536\n",
       "1987-11-17 00:00:00-05:00    0.000714\n",
       "1988-02-12 00:00:00-05:00    0.000714\n",
       "1988-05-16 00:00:00-04:00    0.000714\n",
       "                               ...   \n",
       "2022-08-05 00:00:00-04:00    0.230000\n",
       "2022-11-04 00:00:00-04:00    0.230000\n",
       "2023-02-10 00:00:00-05:00    0.230000\n",
       "2023-05-12 00:00:00-04:00    0.240000\n",
       "2023-08-11 00:00:00-04:00    0.240000\n",
       "Name: Dividends, Length: 80, dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "apple.dividends"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can plot the dividends overtime:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Date'>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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Q7t27WTdunUiUraJ2qZNm+TLL780/ELOysqqdJfDiRMnGrT2691qH0ovuCv/y3DhwoXSpk0bwwI7EZFPP/1UevXqJXFxcSIismDBArGyspJffvnFMOb06dPSsWNHQwhTCvsoYy59hIWFyVtvvVXpcVeuXJGIiAgZMWKEJCcny+DBgytsVtaQ6quHyMhI+eqrrxS7PG1sH+WX0jt27GhYZ3f8+HEZPXq0pKamNmzx17GUPmpikYFl1KhRct9994mISF5enoiULTZSqVRy9913GxZxDR48WEaOHGl4XGZmptxzzz0yY8aMhi/6BjfroXyNyo1TqgkJCRIQEFBhtb2SLKWPadOmycCBAyvsIJqfny8TJ06UsLAwOX78uOj1enn00UfFw8NDZs2aJfv375enn35aunXrVukOJ6WwD/PpIyIiwrBe7vp1B0uXLhWVSiVqtVruuecexXe1rY8erl8EqpTa9iFSdtt8t27d5OLFizJp0iSxs7OTwYMHm8QlFUvpoypmv3Hc9u3bsWnTpgrvquzr64s///wTANC0aVMAQEpKCgYOHIiioiJ89913AIDp06dj/fr16NOnDyZMmIDQ0FBoNBqMHz/ebHpQq9W4fPkyUlJS8Omnn2LKlCm477770KpVqwbfTM0S+khKSsJzzz2HefPm4bfffjMc79OnD3bv3m3YXVen08HR0REjRoyAWq3G+vXroVKpsGLFCjz44INYt24dHnzwQezbtw8rV66Ep6dng/XAPiyjD5VKhc2bNwMArKysUFxcjPj4eIwbNw533XUXDh06hB9//BEODg5m30OTJk0apIf66AMo2wTvyJEj8Pf3R1JSEnbt2oXNmzcbdk9mH7eJ0ompri5fvixjxowRlUolQUFBFW61On36tLi6ukq/fv3k3XfflfDwcGnfvr389NNPEhQUJK+++qph7Lp16+Sll16SRx55pME3i7qVHl577TXD2OTkZBk5cqS0b99ekelhS+jj4sWLcs8994ibm5s8+uij0q1bN3FxcTHc6ldYWCgBAQEyfvx4Eak4I9S3b1955plnDJ/rdDopKCiosB9GQ2EfltVH+Z4eImUzwJMmTWrwjSstoQeR+u1j9uzZ4urqqsilRUvpoy7MMrCUlJRIfHy8DBkyRFavXi0ODg4SFxdXYRpr586d8tRTT0lwcLD83//9n1y+fFlERGJi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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "apple.dividends.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Exercise \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now using the `Ticker` module create an object for AMD (Advanced Micro Devices) with the ticker symbol is `AMD` called; name the object <code>amd</code>.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "apple = yf.Ticker(\"AMD\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2023-10-06 19:46:39--  https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/data/amd.json\n",
      "Resolving cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud (cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud)... 169.63.118.104\n",
      "Connecting to cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud (cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud)|169.63.118.104|:443... connected.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: 5838 (5.7K) [application/json]\n",
      "Saving to: ‘amd.json.2’\n",
      "\n",
      "amd.json.2          100%[===================>]   5.70K  --.-KB/s    in 0s      \n",
      "\n",
      "2023-10-06 19:46:39 (45.2 MB/s) - ‘amd.json.2’ saved [5838/5838]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "!wget https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/data/amd.json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'zip': '95054',\n",
       " 'sector': 'Technology',\n",
       " 'fullTimeEmployees': 15500,\n",
       " 'longBusinessSummary': 'Advanced Micro Devices, Inc. operates as a semiconductor company worldwide. The company operates in two segments, Computing and Graphics; and Enterprise, Embedded and Semi-Custom. Its products include x86 microprocessors as an accelerated processing unit, chipsets, discrete and integrated graphics processing units (GPUs), data center and professional GPUs, and development services; and server and embedded processors, and semi-custom System-on-Chip (SoC) products, development services, and technology for game consoles. The company provides processors for desktop and notebook personal computers under the AMD Ryzen, AMD Ryzen PRO, Ryzen Threadripper, Ryzen Threadripper PRO, AMD Athlon, AMD Athlon PRO, AMD FX, AMD A-Series, and AMD PRO A-Series processors brands; discrete GPUs for desktop and notebook PCs under the AMD Radeon graphics, AMD Embedded Radeon graphics brands; and professional graphics products under the AMD Radeon Pro and AMD FirePro graphics brands. It also offers Radeon Instinct, Radeon PRO V-series, and AMD Instinct accelerators for servers; chipsets under the AMD trademark; microprocessors for servers under the AMD EPYC; embedded processor solutions under the AMD Athlon, AMD Geode, AMD Ryzen, AMD EPYC, AMD R-Series, and G-Series processors brands; and customer-specific solutions based on AMD CPU, GPU, and multi-media technologies, as well as semi-custom SoC products. It serves original equipment manufacturers, public cloud service providers, original design manufacturers, system integrators, independent distributors, online retailers, and add-in-board manufacturers through its direct sales force, independent distributors, and sales representatives. The company was incorporated in 1969 and is headquartered in Santa Clara, California.',\n",
       " 'city': 'Santa Clara',\n",
       " 'phone': '408 749 4000',\n",
       " 'state': 'CA',\n",
       " 'country': 'United States',\n",
       " 'companyOfficers': [],\n",
       " 'website': 'https://www.amd.com',\n",
       " 'maxAge': 1,\n",
       " 'address1': '2485 Augustine Drive',\n",
       " 'industry': 'Semiconductors',\n",
       " 'ebitdaMargins': 0.24674,\n",
       " 'profitMargins': 0.19240999,\n",
       " 'grossMargins': 0.48248002,\n",
       " 'operatingCashflow': 3520999936,\n",
       " 'revenueGrowth': 0.488,\n",
       " 'operatingMargins': 0.22198,\n",
       " 'ebitda': 4055000064,\n",
       " 'targetLowPrice': 107,\n",
       " 'recommendationKey': 'buy',\n",
       " 'grossProfits': 7929000000,\n",
       " 'freeCashflow': 3122749952,\n",
       " 'targetMedianPrice': 150,\n",
       " 'currentPrice': 119.22,\n",
       " 'earningsGrowth': -0.454,\n",
       " 'currentRatio': 2.024,\n",
       " 'returnOnAssets': 0.21327,\n",
       " 'numberOfAnalystOpinions': 38,\n",
       " 'targetMeanPrice': 152.02,\n",
       " 'debtToEquity': 9.764,\n",
       " 'returnOnEquity': 0.47428,\n",
       " 'targetHighPrice': 200,\n",
       " 'totalCash': 3608000000,\n",
       " 'totalDebt': 732000000,\n",
       " 'totalRevenue': 16433999872,\n",
       " 'totalCashPerShare': 3.008,\n",
       " 'financialCurrency': 'USD',\n",
       " 'revenuePerShare': 13.548,\n",
       " 'quickRatio': 1.49,\n",
       " 'recommendationMean': 2.2,\n",
       " 'exchange': 'NMS',\n",
       " 'shortName': 'Advanced Micro Devices, Inc.',\n",
       " 'longName': 'Advanced Micro Devices, Inc.',\n",
       " 'exchangeTimezoneName': 'America/New_York',\n",
       " 'exchangeTimezoneShortName': 'EDT',\n",
       " 'isEsgPopulated': False,\n",
       " 'gmtOffSetMilliseconds': '-14400000',\n",
       " 'quoteType': 'EQUITY',\n",
       " 'symbol': 'AMD',\n",
       " 'messageBoardId': 'finmb_168864',\n",
       " 'market': 'us_market',\n",
       " 'annualHoldingsTurnover': None,\n",
       " 'enterpriseToRevenue': 8.525,\n",
       " 'beta3Year': None,\n",
       " 'enterpriseToEbitda': 34.551,\n",
       " '52WeekChange': 0.51966953,\n",
       " 'morningStarRiskRating': None,\n",
       " 'forwardEps': 4.72,\n",
       " 'revenueQuarterlyGrowth': None,\n",
       " 'sharesOutstanding': 1627360000,\n",
       " 'fundInceptionDate': None,\n",
       " 'annualReportExpenseRatio': None,\n",
       " 'totalAssets': None,\n",
       " 'bookValue': 6.211,\n",
       " 'sharesShort': 27776129,\n",
       " 'sharesPercentSharesOut': 0.0171,\n",
       " 'fundFamily': None,\n",
       " 'lastFiscalYearEnd': 1640390400,\n",
       " 'heldPercentInstitutions': 0.52896,\n",
       " 'netIncomeToCommon': 3161999872,\n",
       " 'trailingEps': 2.57,\n",
       " 'lastDividendValue': 0.005,\n",
       " 'SandP52WeekChange': 0.15217662,\n",
       " 'priceToBook': 19.194977,\n",
       " 'heldPercentInsiders': 0.00328,\n",
       " 'nextFiscalYearEnd': 1703462400,\n",
       " 'yield': None,\n",
       " 'mostRecentQuarter': 1640390400,\n",
       " 'shortRatio': 0.24,\n",
       " 'sharesShortPreviousMonthDate': 1644883200,\n",
       " 'floatShares': 1193798619,\n",
       " 'beta': 1.848425,\n",
       " 'enterpriseValue': 140104957952,\n",
       " 'priceHint': 2,\n",
       " 'threeYearAverageReturn': None,\n",
       " 'lastSplitDate': 966902400,\n",
       " 'lastSplitFactor': '2:1',\n",
       " 'legalType': None,\n",
       " 'lastDividendDate': 798940800,\n",
       " 'morningStarOverallRating': None,\n",
       " 'earningsQuarterlyGrowth': -0.453,\n",
       " 'priceToSalesTrailing12Months': 11.805638,\n",
       " 'dateShortInterest': 1647302400,\n",
       " 'pegRatio': 0.99,\n",
       " 'ytdReturn': None,\n",
       " 'forwardPE': 25.258476,\n",
       " 'lastCapGain': None,\n",
       " 'shortPercentOfFloat': 0.0171,\n",
       " 'sharesShortPriorMonth': 88709340,\n",
       " 'impliedSharesOutstanding': 0,\n",
       " 'category': None,\n",
       " 'fiveYearAverageReturn': None,\n",
       " 'previousClose': 123.23,\n",
       " 'regularMarketOpen': 123.04,\n",
       " 'twoHundredDayAverage': 116.6998,\n",
       " 'trailingAnnualDividendYield': 0,\n",
       " 'payoutRatio': 0,\n",
       " 'volume24Hr': None,\n",
       " 'regularMarketDayHigh': 125.66,\n",
       " 'navPrice': None,\n",
       " 'averageDailyVolume10Day': 102167370,\n",
       " 'regularMarketPreviousClose': 123.23,\n",
       " 'fiftyDayAverage': 115.95,\n",
       " 'trailingAnnualDividendRate': 0,\n",
       " 'open': 123.04,\n",
       " 'toCurrency': None,\n",
       " 'averageVolume10days': 102167370,\n",
       " 'expireDate': None,\n",
       " 'algorithm': None,\n",
       " 'dividendRate': None,\n",
       " 'exDividendDate': 798940800,\n",
       " 'circulatingSupply': None,\n",
       " 'startDate': None,\n",
       " 'regularMarketDayLow': 118.59,\n",
       " 'currency': 'USD',\n",
       " 'trailingPE': 46.389107,\n",
       " 'regularMarketVolume': 99476946,\n",
       " 'lastMarket': None,\n",
       " 'maxSupply': None,\n",
       " 'openInterest': None,\n",
       " 'marketCap': 194013855744,\n",
       " 'volumeAllCurrencies': None,\n",
       " 'strikePrice': None,\n",
       " 'averageVolume': 102428813,\n",
       " 'dayLow': 118.59,\n",
       " 'ask': 117.24,\n",
       " 'askSize': 1100,\n",
       " 'volume': 99476946,\n",
       " 'fiftyTwoWeekHigh': 164.46,\n",
       " 'fromCurrency': None,\n",
       " 'fiveYearAvgDividendYield': None,\n",
       " 'fiftyTwoWeekLow': 72.5,\n",
       " 'bid': 117.24,\n",
       " 'tradeable': False,\n",
       " 'dividendYield': None,\n",
       " 'bidSize': 900,\n",
       " 'dayHigh': 125.66,\n",
       " 'regularMarketPrice': 119.22,\n",
       " 'preMarketPrice': 116.98,\n",
       " 'logo_url': 'https://logo.clearbit.com/amd.com'}"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import json\n",
    "with open('amd.json') as json_file:\n",
    "    amd_info = json.load(json_file)\n",
    "    # Print the type of data variable    \n",
    "    #print(\"Type:\", type(apple_info))\n",
    "amd_info"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>Question 1</b> Use the key  <code>'country'</code> to find the country the stock belongs to, remember it as it will be a quiz question.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'United States'"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "amd_info['country']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>Question 2</b> Use the key  <code>'sector'</code> to find the sector the stock belongs to, remember it as it will be a quiz question.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Technology'"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "amd_info['sector']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>Question 3</b> Obtain stock data for AMD using the `history` function, set the `period` to max. Find the `Volume` traded on the first day (first row).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Volume traded on the first day: 219600.0\n"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "\n",
    "# Get stock data for AMD\n",
    "amd = yf.Ticker(\"AMD\")\n",
    "\n",
    "# Get historical data with period set to max\n",
    "history = amd.history(period=\"max\")\n",
    "\n",
    "# Get the volume traded on the first day\n",
    "first_day_volume = history.iloc[0]['Volume']\n",
    "\n",
    "print(\"Volume traded on the first day:\", first_day_volume)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>About the Authors:</h2> \n",
    "\n",
    "<a href=\"https://www.linkedin.com/in/joseph-s-50398b136/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkPY0220ENSkillsNetwork900-2022-01-01\">Joseph Santarcangelo</a> has a PhD in Electrical Engineering, his research focused on using machine learning, signal processing, and computer vision to determine how videos impact human cognition. Joseph has been working for IBM since he completed his PhD.\n",
    "\n",
    "Azim Hirjani\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Change Log\n",
    "\n",
    "| Date (YYYY-MM-DD) | Version | Changed By    | Change Description        |\n",
    "| ----------------- | ------- | ------------- | ------------------------- |\n",
    "| 2020-11-10        | 1.1     | Malika Singla | Deleted the Optional part |\n",
    "| 2020-08-27        | 1.0     | Malika Singla | Added lab to GitLab       |\n",
    "\n",
    "<hr>\n",
    "\n",
    "## <h3 align=\"center\"> © IBM Corporation 2020. All rights reserved. <h3/>\n",
    "\n",
    "<p>\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
